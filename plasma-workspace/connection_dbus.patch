From: Weng Xuetian <wengxt@gmail.com>
Date: Wed, 09 Mar 2016 19:02:37 +0000
Subject: use QDBusConnectionInterface::serviceOwnerChanged to watch mpris2
X-Git-Url: http://quickgit.kde.org/?p=plasma-workspace.git&a=commitdiff&h=70326bdbed9b3e2f74990e170cb400f1e6769c8d
---
use QDBusConnectionInterface::serviceOwnerChanged to watch mpris2

Current usage of QDBusServiceWatcher is not a intended feature and will
be removed in Qt 5.6 (see https://bugreports.qt.io/browse/QTBUG-51683 ).
Use the old fashioned QDBusConnectionInterface::serviceOwnerChanged to
implement the same thing.

REVIEW: 127285
---


--- a/applets/systemtray/plugin/protocols/plasmoid/plasmoidprotocol.cpp
+++ b/applets/systemtray/plugin/protocols/plasmoid/plasmoidprotocol.cpp
@@ -38,7 +38,6 @@
 
 #include <QDBusConnection>
 #include <QDBusConnectionInterface>
-#include <QDBusServiceWatcher>
 #include <QDBusPendingCallWatcher>
 #include <QRegExp>
 
@@ -306,15 +305,17 @@
     // not just compare them
     // This makes mpris work, since it wants to match org.mpris.MediaPlayer2.dragonplayer
     // against org.mpris.MediaPlayer2
-    QDBusServiceWatcher *serviceWatcher = new QDBusServiceWatcher(QString(),
-                                                connection,
-                                                QDBusServiceWatcher::WatchForOwnerChange,
-                                                this);
-    connect(serviceWatcher, &QDBusServiceWatcher::serviceRegistered, this, &PlasmoidProtocol::serviceRegistered);
-    connect(serviceWatcher, &QDBusServiceWatcher::serviceUnregistered, this, &PlasmoidProtocol::serviceUnregistered);
-}
-
-
+    connect(connection.interface(), &QDBusConnectionInterface::serviceOwnerChanged, this, &PlasmoidProtocol::serviceOwnerChanged);
+}
+
+void PlasmoidProtocol::serviceOwnerChanged(const QString &serviceName, const QString &oldOwner, const QString &newOwner)
+{
+    if (oldOwner.isEmpty()) {
+        serviceRegistered(serviceName);
+    } else if (newOwner.isEmpty()) {
+        serviceUnregistered(serviceName);
+    }
+}
 
 void PlasmoidProtocol::serviceRegistered(const QString &service)
 {

--- a/applets/systemtray/plugin/protocols/plasmoid/plasmoidprotocol.h
+++ b/applets/systemtray/plugin/protocols/plasmoid/plasmoidprotocol.h
@@ -62,10 +62,11 @@
 
 private Q_SLOTS:
     void serviceNameFetchFinished(QDBusPendingCallWatcher* watcher, const QDBusConnection &connection);
+    void serviceOwnerChanged(const QString &serviceName, const QString &oldOwner, const QString &newOwner);
+
+private:
     void serviceRegistered(const QString &service);
     void serviceUnregistered(const QString &service);
-
-private:
     void initDBusActivatables();
     void newDBusActivatableTask(const QString &pluginName, const QString &dbusService);
     QHash<QString, PlasmoidTask*> m_tasks;

--- a/dataengines/mpris2/mpris2engine.cpp
+++ b/dataengines/mpris2/mpris2engine.cpp
@@ -20,7 +20,6 @@
 
 #include <QDBusConnection>
 #include <QDBusConnectionInterface>
-#include <QDBusServiceWatcher>
 #include <QDBusPendingCallWatcher>
 #include <QDBusPendingReply>
 #include <QStringList>
@@ -39,10 +38,7 @@
 {
     Q_UNUSED(args)
 
-    QDBusServiceWatcher *serviceWatcher = new QDBusServiceWatcher(
-            QString(), QDBusConnection::sessionBus(),
-            QDBusServiceWatcher::WatchForOwnerChange, this);
-    connect(serviceWatcher, &QDBusServiceWatcher::serviceOwnerChanged,
+    connect(QDBusConnection::sessionBus().interface(), &QDBusConnectionInterface::serviceOwnerChanged,
             this,           &Mpris2Engine::serviceOwnerChanged);
 
     QDBusPendingCall async = QDBusConnection::sessionBus().interface()->asyncCall(QStringLiteral("ListNames"));
     
