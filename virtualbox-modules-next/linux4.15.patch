diff --git a/vboxdrv/r0drv/linux/timer-r0drv-linux.c b/vboxdrv/r0drv/linux/timer-r0drv-linux.c
index 810779a..c0b5245 100644
--- a/vboxdrv/r0drv/linux/timer-r0drv-linux.c
+++ b/vboxdrv/r0drv/linux/timer-r0drv-linux.c
@@ -720,9 +720,17 @@ static enum hrtimer_restart rtTimerLinuxHrCallback(struct hrtimer *pHrTimer)
  *
  * @param   ulUser      Address of the sub-timer structure.
  */
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(4, 8, 0)
+static void rtTimerLinuxStdCallback(struct timer_list *t)
+#else
 static void rtTimerLinuxStdCallback(unsigned long ulUser)
+#endif
 {
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(4, 8, 0)
+    PRTTIMERLNXSUBTIMER pSubTimer = from_timer(pSubTimer, t, u.Std.LnxTimer);
+#else
     PRTTIMERLNXSUBTIMER pSubTimer = (PRTTIMERLNXSUBTIMER)ulUser;
+#endif
     PRTTIMER            pTimer    = pSubTimer->pParent;
 
     RTTIMERLNX_LOG(("stdcallback %p\n", pTimer));
@@ -1585,12 +1593,15 @@ RTDECL(int) RTTimerCreateEx(PRTTIMER *ppTimer, uint64_t u64NanoInterval, uint32_
 #endif
         {
 #if LINUX_VERSION_CODE >= KERNEL_VERSION(4, 8, 0)
-            init_timer_pinned(&pTimer->aSubTimers[iCpu].u.Std.LnxTimer);
+            timer_setup(&pTimer->aSubTimers[iCpu].u.Std.LnxTimer,
+                rtTimerLinuxStdCallback, TIMER_PINNED);
 #else
             init_timer(&pTimer->aSubTimers[iCpu].u.Std.LnxTimer);
 #endif
+#if LINUX_VERSION_CODE < KERNEL_VERSION(4, 8, 0)
             pTimer->aSubTimers[iCpu].u.Std.LnxTimer.data        = (unsigned long)&pTimer->aSubTimers[iCpu];
             pTimer->aSubTimers[iCpu].u.Std.LnxTimer.function    = rtTimerLinuxStdCallback;
+#endif
             pTimer->aSubTimers[iCpu].u.Std.LnxTimer.expires     = jiffies;
             pTimer->aSubTimers[iCpu].u.Std.u64NextTS            = 0;
         }
