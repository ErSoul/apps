diff --git a/applet/contents/ui/ListItemBase.qml b/applet/contents/ui/ListItemBase.qml
index 2e31eeb..85a9faf 100644
--- a/applet/contents/ui/ListItemBase.qml
+++ b/applet/contents/ui/ListItemBase.qml
@@ -32,11 +32,10 @@ PlasmaComponents.ListItem {
     id: item
 
     property bool expanded: false
-    property string icon
     property Component subComponent
 
     property alias label: textLabel.text
-    property alias expanderIconVisible: expanderIcon.visible
+    property alias icon: clientIcon.source
 
     enabled: subComponent
 
@@ -48,7 +47,7 @@ PlasmaComponents.ListItem {
         if (volume > 0 && Muted) {
             toggleMute();
         }
-        Volume = volume
+        PulseObject.volume = volume
     }
 
     function bound(value, min, max) {
@@ -87,11 +86,6 @@ PlasmaComponents.ListItem {
         right: parent.right;
     }
 
-    onIconChanged: {
-        clientIcon.visible = icon ? true : false;
-        clientIcon.icon = icon
-    }
-
     ColumnLayout {
         property int maximumWidth: parent.width
         width: maximumWidth
@@ -99,11 +93,11 @@ PlasmaComponents.ListItem {
 
         RowLayout {
             Layout.fillWidth: true
-            spacing: 8
+            spacing: units.smallSpacing
 
-            QIconItem {
+            PlasmaCore.IconItem {
                 id: clientIcon
-                visible: false
+                visible: valid
                 Layout.alignment: Qt.AlignHCenter
                 width: height
                 height: column.height * 0.75
@@ -232,10 +226,8 @@ PlasmaComponents.ListItem {
         Loader {
             id: subLoader
 
-            anchors.right: parent.right
-            anchors.left: parent.left
-            anchors.leftMargin: units.gridUnit
-
+            Layout.fillWidth: true
+            Layout.leftMargin: units.gridUnit + clientIcon.width
             Layout.minimumHeight: subLoader.item ? subLoader.item.height : 0
             Layout.maximumHeight: Layout.minimumHeight
         }
@@ -263,7 +255,7 @@ PlasmaComponents.ListItem {
             name: "expanded";
             when: expanded;
             StateChangeScript {
-                script: subLoader.sourceComponent = subComponent;
+                script: subLoader.sourceComponent = Qt.binding(function() { return subComponent; });
             }
         }
     ]
diff --git a/applet/contents/ui/SinkInputListItem.qml b/applet/contents/ui/SinkInputListItem.qml
index 3867007..0298366 100644
--- a/applet/contents/ui/SinkInputListItem.qml
+++ b/applet/contents/ui/SinkInputListItem.qml
@@ -25,45 +25,49 @@ import org.kde.plasma.components 2.0 as PlasmaComponents
 import org.kde.plasma.private.volume 0.1
 
 StreamListItemBase {
-    // FIXME: all of this needs to be dependent on how many sinks we have...
-    expanderIconVisible: false
-    enabled: true
-    subComponent: PlasmaComponents.ComboBox {
-        model: SinkModel {}
-        textRole: 'Description'
-        onModelChanged: updateIndex()
-        onCountChanged: updateIndex()
-        onActivated: {
-            if (index === -1) {
-                // Current index doesn't map to anything. Oh the agony.
-                return;
+    subComponent: sinkModel.sinks.length > 1 ? sinkComboBox : null
+
+    Component {
+        id: sinkComboBox
+
+        PlasmaComponents.ComboBox {
+            model: sinkModel
+            textRole: 'Description'
+            height: implicitHeight
+            onModelChanged: updateIndex()
+            onCountChanged: updateIndex()
+            onActivated: {
+                if (index === -1) {
+                    // Current index doesn't map to anything. Oh the agony.
+                    return;
+                }
+                PulseObject.sinkIndex = modelIndexToSinkIndex(index)
             }
-            PulseObject.sinkIndex = modelIndexToSinkIndex(index)
-        }
 
-        function updateIndex() {
-            currentIndex = sinkIndexToModelIndex(SinkIndex);
-        }
+            function updateIndex() {
+                currentIndex = sinkIndexToModelIndex(SinkIndex);
+            }
 
-        function sinkIndexToModelIndex(sinkIndex) {
-            textRole = 'Index';
-            var searchString = '';
-            if (sinkIndex !== 0) {
-                // The stringy representation of 0 is '' oddly enough.
-                searchString = '' + sinkIndex;
+            function sinkIndexToModelIndex(sinkIndex) {
+                textRole = 'Index';
+                var searchString = '';
+                if (sinkIndex !== 0) {
+                    // The stringy representation of 0 is '' oddly enough.
+                    searchString = '' + sinkIndex;
+                }
+                var modelIndex = find(searchString);
+                textRole = 'Description';
+                return modelIndex;
             }
-            var modelIndex = find(searchString);
-            textRole = 'Description';
-            return modelIndex;
-        }
 
-        function modelIndexToSinkIndex(modelIndex) {
-            textRole = 'Index';
-            var sinkIndex = Number(textAt(modelIndex));
-            textRole = 'Description';
-            return sinkIndex;
-        }
+            function modelIndexToSinkIndex(modelIndex) {
+                textRole = 'Index';
+                var sinkIndex = Number(textAt(modelIndex));
+                textRole = 'Description';
+                return sinkIndex;
+            }
 
-        Component.onCompleted: updateIndex();
+            Component.onCompleted: updateIndex();
+        }
     }
 }
diff --git a/applet/contents/ui/SourceOutputListItem.qml b/applet/contents/ui/SourceOutputListItem.qml
index 3b684fc..73a7042 100644
--- a/applet/contents/ui/SourceOutputListItem.qml
+++ b/applet/contents/ui/SourceOutputListItem.qml
@@ -25,45 +25,49 @@ import org.kde.plasma.components 2.0 as PlasmaComponents
 import org.kde.plasma.private.volume 0.1
 
 StreamListItemBase {
-    // FIXME: all of this needs to be dependent on how many sources we have...
-    expanderIconVisible: false
-    enabled: true
-    subComponent: PlasmaComponents.ComboBox {
-        model: SourceModel {}
-        textRole: 'Description'
-        onModelChanged: updateIndex()
-        onCountChanged: updateIndex()
-        onActivated: {
-            if (index === -1) {
-                // Current index doesn't map to anything. Oh the agony.
-                return;
+    subComponent: sourceModel.sources.length > 1 ? sourceComboBox : null
+
+    Component {
+        id: sourceComboBox
+
+        PlasmaComponents.ComboBox {
+            model: sourceModel
+            textRole: 'Description'
+            height: implicitHeight
+            onModelChanged: updateIndex()
+            onCountChanged: updateIndex()
+            onActivated: {
+                if (index === -1) {
+                    // Current index doesn't map to anything. Oh the agony.
+                    return;
+                }
+                PulseObject.sourceIndex = modelIndexToSourceIndex(index)
             }
-            PulseObject.sourceIndex = modelIndexToSourceIndex(index)
-        }
 
-        function updateIndex() {
-            currentIndex = sourceIndexToModelIndex(SourceIndex);
-        }
+            function updateIndex() {
+                currentIndex = sourceIndexToModelIndex(SourceIndex);
+            }
 
-        function sourceIndexToModelIndex(sourceIndex) {
-            textRole = 'Index';
-            var searchString = '';
-            if (sourceIndex !== 0) {
-                // The stringy representation of 0 is '' oddly enough.
-                searchString = '' + sourceIndex;
+            function sourceIndexToModelIndex(sourceIndex) {
+                textRole = 'Index';
+                var searchString = '';
+                if (sourceIndex !== 0) {
+                    // The stringy representation of 0 is '' oddly enough.
+                    searchString = '' + sourceIndex;
+                }
+                var modelIndex = find(searchString);
+                textRole = 'Description';
+                return modelIndex;
             }
-            var modelIndex = find(searchString);
-            textRole = 'Description';
-            return modelIndex;
-        }
 
-        function modelIndexToSourceIndex(modelIndex) {
-            textRole = 'Index';
-            var sourceIndex = Number(textAt(modelIndex));
-            textRole = 'Description';
-            return sourceIndex;
-        }
+            function modelIndexToSourceIndex(modelIndex) {
+                textRole = 'Index';
+                var sourceIndex = Number(textAt(modelIndex));
+                textRole = 'Description';
+                return sourceIndex;
+            }
 
-        Component.onCompleted: updateIndex();
+            Component.onCompleted: updateIndex();
+        }
     }
 }
diff --git a/applet/contents/ui/StreamListItemBase.qml b/applet/contents/ui/StreamListItemBase.qml
index 7c0af12..a47be1c 100644
--- a/applet/contents/ui/StreamListItemBase.qml
+++ b/applet/contents/ui/StreamListItemBase.qml
@@ -26,15 +26,5 @@ import org.kde.plasma.private.volume 0.1
 
 ListItemBase {
     label: i18nc("label of stream items", "%1: %2", PulseObject.client.name, PulseObject.name)
-    icon: {
-        if (PulseObject.client.properties['application.icon_name']) {
-            return PulseObject.client.properties['application.icon_name'].toLowerCase();
-        } else if (PulseObject.client.properties['application.process.binary']) {
-            if (PulseObject.client.properties['application.process.binary'].toLowerCase() === 'chrome') {
-                return 'google-chrome';
-            }
-            return PulseObject.client.properties['application.process.binary'].toLowerCase();
-        }
-        return 'unknown';
-    }
+    icon: PulseObject.client.icon
 }
diff --git a/applet/contents/ui/main.qml b/applet/contents/ui/main.qml
index bf6f683..dda2555 100644
--- a/applet/contents/ui/main.qml
+++ b/applet/contents/ui/main.qml
@@ -37,6 +37,8 @@ Item {
     Layout.preferredHeight: units.gridUnit * 20
     Layout.preferredWidth: units.gridUnit * 20
     property string displayName: i18n("Audio Volume")
+    property alias sinkModel: sinkModel
+    property alias sourceModel: sourceModel
 
     Plasmoid.icon: sinkModel.sinks.length > 0 ? Icon.name(sinkModel.sinks[0].volume, sinkModel.sinks[0].muted) : Icon.name(0, true)
     Plasmoid.switchWidth: units.gridUnit * 12
@@ -148,55 +150,132 @@ Item {
         id: osd
     }
 
+    PlasmaComponents.TabBar {
+        id: tabBar
+
+        anchors {
+            top: parent.top
+            left: parent.left
+            right: parent.right
+        }
+
+        PlasmaComponents.TabButton {
+            id: devicesTab
+            text: i18n("Devices")
+        }
+
+        PlasmaComponents.TabButton {
+            id: streamsTab
+            text: i18n("Applications")
+        }
+    }
+
     PlasmaExtras.ScrollArea {
         id: scrollView;
+        horizontalScrollBarPolicy: Qt.ScrollBarAlwaysOff
 
         anchors {
-            fill: parent
-            rightMargin: 16
+            top: tabBar.bottom
+            topMargin: units.smallSpacing
+            left: parent.left
+            right: parent.right
+            bottom: parent.bottom
         }
 
-        ColumnLayout {
-            property int maximumWidth: scrollView.viewport.width
-            width: maximumWidth
-            Layout.maximumWidth: maximumWidth
+        Item {
+            width: streamsView.visible ? streamsView.width : devicesView.width
+            height: streamsView.visible ? streamsView.height : devicesView.height
 
-            Header {
-                Layout.fillWidth: true
-                visible: sinkView.count > 0
-                text: i18n("Playback Devices")
-            }
-            ListView {
-                id: sinkView
+            ColumnLayout {
+                id: streamsView
+                visible: tabBar.currentTab == streamsTab
+                property int maximumWidth: scrollView.viewport.width
+                width: maximumWidth
+                Layout.maximumWidth: maximumWidth
 
-                Layout.fillWidth: true
-                Layout.minimumHeight: contentHeight
-                Layout.maximumHeight: contentHeight
+                Header {
+                    Layout.fillWidth: true
+                    visible: sinkInputView.count > 0
+                    text: i18n("Playback Streams")
+                }
+                ListView {
+                    id: sinkInputView
+
+                    Layout.fillWidth: true
+                    Layout.minimumHeight: contentHeight
+                    Layout.maximumHeight: contentHeight
 
-                model: SinkModel {
-                    id: sinkModel
+                    model: SinkInputModel {
+                        id: sinkInputModel
+                    }
+                    boundsBehavior: Flickable.StopAtBounds;
+                    delegate: SinkInputListItem {}
                 }
-                boundsBehavior: Flickable.StopAtBounds;
-                delegate: SinkListItem {}
-            }
 
-            Header {
-                Layout.fillWidth: true
-                visible: sourceView.count > 0
-                text: i18n("Capture Devices")
+                Header {
+                    Layout.fillWidth: true
+                    visible: sourceOutputView.count > 0
+                    text: i18n("Capture Streams")
+                }
+                ListView {
+                    id: sourceOutputView
+
+                    Layout.fillWidth: true
+                    Layout.minimumHeight: contentHeight
+                    Layout.maximumHeight: contentHeight
+
+                    model: SourceOutputModel {
+                        id: sourceOutputModel
+                    }
+                    boundsBehavior: Flickable.StopAtBounds;
+                    delegate: SourceOutputListItem {}
+                }
             }
-            ListView {
-                id: sourceView
 
-                Layout.fillWidth: true
-                Layout.minimumHeight: contentHeight
-                Layout.maximumHeight: contentHeight
+            ColumnLayout {
+                id: devicesView
+                visible: tabBar.currentTab == devicesTab
+                property int maximumWidth: scrollView.viewport.width
+                width: maximumWidth
+                Layout.maximumWidth: maximumWidth
+
+                Header {
+                    Layout.fillWidth: true
+                    visible: sinkView.count > 0
+                    text: i18n("Playback Devices")
+                }
+                ListView {
+                    id: sinkView
+
+                    Layout.fillWidth: true
+                    Layout.minimumHeight: contentHeight
+                    Layout.maximumHeight: contentHeight
+
+                    model: SinkModel {
+                        id: sinkModel
+                    }
+                    boundsBehavior: Flickable.StopAtBounds;
+                    delegate: SinkListItem {}
+                }
+
+                Header {
+                    Layout.fillWidth: true
+                    visible: sourceView.count > 0
+                    text: i18n("Capture Devices")
+                }
+                ListView {
+                    id: sourceView
+
+                    Layout.fillWidth: true
+                    Layout.minimumHeight: contentHeight
+                    Layout.maximumHeight: contentHeight
 
-                model: SourceModel {
-                    id: sourceModel
+                    model: SourceModel {
+                        id: sourceModel
+                    }
+                    boundsBehavior: Flickable.StopAtBounds;
+                    delegate: SourceListItem {}
                 }
-                boundsBehavior: Flickable.StopAtBounds;
-                delegate: SourceListItem {}
             }
         }
     }
diff --git a/src/pulseaudio.h b/src/pulseaudio.h
index 9fc9656..474beb0 100644
--- a/src/pulseaudio.h
+++ b/src/pulseaudio.h
@@ -97,6 +97,7 @@ private:
 class Q_DECL_EXPORT SourceModel : public AbstractModel
 {
     Q_OBJECT
+    Q_PROPERTY(QList<QObject *> sources READ sources NOTIFY sourcesChanged)
 public:
     enum ItemRole {
         IndexRole = Qt::UserRole + 1,
@@ -106,6 +107,8 @@ public:
 
     SourceModel(QObject *parent = nullptr);
 
+    QList<QObject *> sources() const;
+
     int rowCount(const QModelIndex &parent = QModelIndex()) const Q_DECL_OVERRIDE;
     QVariant data(const QModelIndex &index, int role = Qt::DisplayRole) const Q_DECL_OVERRIDE;
     bool setData(const QModelIndex &index, const QVariant &value, int role) Q_DECL_OVERRIDE;
diff --git a/src/pulseaudio.cpp b/src/pulseaudio.cpp
index 1488784..d10145f 100644
--- a/src/pulseaudio.cpp
+++ b/src/pulseaudio.cpp
@@ -115,7 +115,6 @@ SinkModel::SinkModel(QObject *parent)
     emit sinksChanged();
 }
 
-#warning very naughty, used by main.qml to set volume on all sinks
 QList<QObject *> SinkModel::sinks() const
 {
     QList <QObject *> ret;
@@ -307,6 +306,17 @@ SourceModel::SourceModel(QObject *parent)
     emit sourcesChanged();
 }
 
+QList<QObject *> SourceModel::sources() const
+{
+    QList <QObject *> ret;
+    if (!context())
+        return ret;
+    for (Source *source : context()->sources().data().values()) {
+        ret << source;
+    }
+    return ret;
+}
+
 int SourceModel::rowCount(const QModelIndex &parent) const
 {
     Q_UNUSED(parent);
